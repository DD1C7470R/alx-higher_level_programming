==1119== Memcheck, a memory error detector
==1119== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1119== Using Valgrind-3.15.0-608cb11914-20190413 and LibVEX; rerun with -h for copyright info
==1119== Command: ./libPython.so
==1119== Parent PID: 1086
==1119== 
--1119-- 
--1119-- Valgrind options:
--1119--    --leak-check=full
--1119--    --show-leak-kinds=all
--1119--    --track-origins=yes
--1119--    --verbose
--1119--    --log-file=valgrind-out.txt
--1119-- Contents of /proc/version:
--1119--   Linux version 5.3.0-1032-aws (buildd@lgw01-amd64-026) (gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)) #34~18.04.2-Ubuntu SMP Fri Jul 24 10:06:28 UTC 2020
--1119-- 
--1119-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-ssse3-avx-avx2-bmi-f16c-rdrand
--1119-- Page sizes: currently 4096, max supported 4096
--1119-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--1119-- Reading syms from /root/alx-higher_level_programming/0x04-python-more_data_structures/libPython.so
--1119-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--1119--    object doesn't have a symbol table
--1119--    object doesn't have a dynamic symbol table
--1119-- Scheduler: using generic scheduler lock implementation.
--1119-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==1119== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-1119-by-???-on-0bedd1735925
==1119== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-1119-by-???-on-0bedd1735925
==1119== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-1119-by-???-on-0bedd1735925
==1119== 
==1119== TO CONTROL THIS PROCESS USING vgdb (which you probably
==1119== don't want to do, unless you know exactly what you're doing,
==1119== or are doing some strange experiment):
==1119==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=1119 ...command...
==1119== 
==1119== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==1119==   /path/to/gdb ./libPython.so
==1119== and then give GDB the following command
==1119==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=1119
==1119== --pid is optional if only one valgrind process is running
==1119== 
==1119== 
==1119== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1119==  Access not within mapped region at address 0x0
==1119==    at 0x1: ???
==1119==    by 0x1FFF000782: ???
==1119==  If you believe this happened as a result of a stack
==1119==  overflow in your program's main thread (unlikely but
==1119==  possible), you can try to increase the size of the
==1119==  main thread stack using the --main-stacksize= flag.
==1119==  The main thread stack size used in this run was 8388608.
==1119== 
==1119== HEAP SUMMARY:
==1119==     in use at exit: 0 bytes in 0 blocks
==1119==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==1119== 
==1119== All heap blocks were freed -- no leaks are possible
==1119== 
==1119== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
